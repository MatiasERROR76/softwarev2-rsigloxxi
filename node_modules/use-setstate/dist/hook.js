"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var helpers_1 = require("./helpers");
exports.useSetState = function (initial, callback) {
    var _a = React.useState(initial), value = _a[0], setValue = _a[1];
    if (callback !== undefined) {
        var hasRun_1 = React.useRef(false);
        if (helpers_1.isFunction(callback)) {
            React.useEffect(function () {
                if (hasRun_1.current) {
                    callback(value);
                }
                else {
                    hasRun_1.current = true;
                }
            }, [value]);
        }
        else if (!hasRun_1.current) {
            console.warn("useSetState: function type for callback argument expected. Found callback of type \"" + typeof callback + "\"");
            hasRun_1.current = true;
        }
    }
    var applyValue = function (newValue) {
        if (typeof value === "object" && typeof newValue === "object") {
            setValue(__assign(__assign({}, value), newValue));
        }
        else {
            setValue(newValue);
        }
    };
    var setState = function (state) {
        if (helpers_1.isFunction(state)) {
            var transform = state;
            setValue(transform(value));
        }
        else {
            applyValue(state);
        }
    };
    return [value, setState];
};
//# sourceMappingURL=hook.js.map