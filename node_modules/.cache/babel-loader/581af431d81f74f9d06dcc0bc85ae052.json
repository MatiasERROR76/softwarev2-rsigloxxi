{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar helpers_1 = require(\"./helpers\");\n\nexports.useSetState = function (initial, callback) {\n  var _a = React.useState(initial),\n      value = _a[0],\n      setValue = _a[1];\n\n  if (callback !== undefined) {\n    var hasRun_1 = React.useRef(false);\n\n    if (helpers_1.isFunction(callback)) {\n      React.useEffect(function () {\n        if (hasRun_1.current) {\n          callback(value);\n        } else {\n          hasRun_1.current = true;\n        }\n      }, [value]);\n    } else if (!hasRun_1.current) {\n      console.warn(\"useSetState: function type for callback argument expected. Found callback of type \\\"\" + typeof callback + \"\\\"\");\n      hasRun_1.current = true;\n    }\n  }\n\n  var applyValue = function (newValue) {\n    if (typeof value === \"object\" && typeof newValue === \"object\") {\n      setValue(__assign(__assign({}, value), newValue));\n    } else {\n      setValue(newValue);\n    }\n  };\n\n  var setState = function (state) {\n    if (helpers_1.isFunction(state)) {\n      var transform = state;\n      setValue(transform(value));\n    } else {\n      applyValue(state);\n    }\n  };\n\n  return [value, setState];\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAQaA,sBAAc,UAAuBC,OAAvB,EAAqDC,QAArD,EAAsF;EACzG;EAAA,IAACC,aAAD;EAAA,IAAQC,gBAAR;;EAEN,IAAIF,QAAQ,KAAKG,SAAjB,EAA4B;IAC1B,IAAMC,QAAM,GAAGC,KAAK,CAACC,MAAN,CAAa,KAAb,CAAf;;IAEA,IAAIC,qBAAWP,QAAX,CAAJ,EAA0B;MACxBK,KAAK,CAACG,SAAN,CAAgB;QACd,IAAIJ,QAAM,CAACK,OAAX,EAAoB;UAClBT,QAAQ,CAACC,KAAD,CAAR;QACD,CAFD,MAEO;UACLG,QAAM,CAACK,OAAP,GAAiB,IAAjB;QACD;MACF,CAND,EAMG,CAACR,KAAD,CANH;IAOD,CARD,MAQO,IAAI,CAACG,QAAM,CAACK,OAAZ,EAAqB;MAC1BC,OAAO,CAACC,IAAR,CAAa,yFAAsF,OAAOX,QAA7F,GAAqG,IAAlH;MACAI,QAAM,CAACK,OAAP,GAAiB,IAAjB;IACD;EACF;;EAED,IAAMG,UAAU,GAAG,UAACC,QAAD,EAAY;IAC7B,IAAI,OAAOZ,KAAP,KAAiB,QAAjB,IAA6B,OAAOY,QAAP,KAAoB,QAArD,EAA+D;MAC7DX,QAAQ,uBAAMD,KAAN,GAAgBY,QAAhB,EAAR;IACD,CAFD,MAEO;MACLX,QAAQ,CAACW,QAAD,CAAR;IACD;EACF,CAND;;EAQA,IAAMC,QAAQ,GAAG,UAACC,KAAD,EAA0B;IACzC,IAAIR,qBAAWQ,KAAX,CAAJ,EAAuB;MACrB,IAAMC,SAAS,GAAGD,KAAlB;MACAb,QAAQ,CAACc,SAAS,CAACf,KAAD,CAAV,CAAR;IACD,CAHD,MAGO;MACLW,UAAU,CAACG,KAAD,CAAV;IACD;EACF,CAPD;;EASA,OAAO,CAACd,KAAD,EAAQa,QAAR,CAAP;AACD,CAtCY","names":["exports","initial","callback","value","setValue","undefined","hasRun_1","React","useRef","helpers_1","useEffect","current","console","warn","applyValue","newValue","setState","state","transform"],"sources":["C:\\Users\\admin\\Desktop\\Master\\AprendiendoReact\\node_modules\\use-setstate\\src\\hook.ts"],"sourcesContent":["import * as React from \"react\";\nimport { isFunction, TypedFunction, FunctionOrValue, TypedValue, HookType } from \"./helpers\";\n\n/**\n * The useSetState melds the useState hook with the state change callback that is provided by the setState method of class based components.\n *\n * @param initial\n * @param callback\n */\nexport const useSetState = <T extends TypedValue>(initial?: FunctionOrValue<T>, callback?: TypedFunction<T, void>): HookType<T> => {\n  const [value, setValue] = React.useState<T>(initial);\n\n  if (callback !== undefined) {\n    const hasRun = React.useRef(false);\n\n    if (isFunction(callback)) {\n      React.useEffect((): void => {\n        if (hasRun.current) {\n          callback(value);\n        } else {\n          hasRun.current = true;\n        }\n      }, [value]);\n    } else if (!hasRun.current) {\n      console.warn(`useSetState: function type for callback argument expected. Found callback of type \"${typeof callback}\"`);\n      hasRun.current = true;\n    }\n  }\n\n  const applyValue = (newValue: T): void => {\n    if (typeof value === \"object\" && typeof newValue === \"object\") {\n      setValue({ ...value, ...newValue });\n    } else {\n      setValue(newValue);\n    }\n  };\n\n  const setState = (state: FunctionOrValue<T>): void => {\n    if (isFunction(state)) {\n      const transform = state as TypedFunction<T, T>;\n      setValue(transform(value));\n    } else {\n      applyValue(state as T);\n    }\n  };\n\n  return [value, setState];\n};\n"]},"metadata":{},"sourceType":"script"}